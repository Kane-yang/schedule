* 面试要求
2、参加过中大型web应用软件系统的架构或概要设计；
3、熟悉常用的设计模式，理解I0、多线程、集合等基础框架，对JVM原理有一定的了解；
4、熟练掌握Javaweb常用框架，如SSH、SpringMVC、Springboot、MyBatis等；
5、掌握HTML、CSS\JavaScript、Ajax、XML等前端展现技术，对前后端分离开发有较深的了解；
6、掌握Oracle、SQLsever或Mysql等至少一种关系数据库，对sql使用和优化有一定经验；
7、掌握Apache、Tomcat、Jboss等至少一种主流服务器工作原理、配置细节；
9、掌握至少一种缓存技术如Redis的使用，掌握至少一种消息中间件如MQ的使用；


3、熟悉分布式、缓存、消息中间件等机制和技术原理，有服务器优化、系统性能调优经验
4、熟悉常用的数据库（如mysql、oracle、postgresql等），SQL调优熟练，有分布式数据库的使用和调优经验优先
5、熟悉HTTP/HTTPS，Socket等协议，熟悉至少一种RPC框架原理并有实战经验
6、熟练运用常用设计模式，熟悉Java多线程、高并发开发，有系统重构、性能调优经验者优先

# 功能预见性、系统可用性、容错性、可靠性、可伸缩、性能、可维护性、安全性、成本、可度量性
* 架构
** springboot
*** jdbc使用：数据源，其实就是数据库连接池的使用 hikaricp
*** 事务级别
**** /**
     * 事务传播 - Propagation
     *      REQUIRED: 使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法是必须运行在一个事务中的；
     *                如果当前存在事务，则加入这个事务，成为一个整体。
     *                举例：领导没饭吃，我有钱，我会自己买了自己吃；领导有的吃，会分给你一起吃。
     *      SUPPORTS: 如果当前有事务，则使用事务；如果当前没有事务，则不使用事务。
     *                举例：领导没饭吃，我也没饭吃；领导有饭吃，我也有饭吃。
     *      MANDATORY: 该传播属性强制必须存在一个事务，如果不存在，则抛出异常
     *                  举例：领导必须管饭，不管饭没饭吃，我就不乐意了，就不干了（抛出异常）
     *      REQUIRES_NEW: 如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用；
     *                    如果当前没有事务，则同 REQUIRED
     *                    举例：领导有饭吃，我偏不要，我自己买了自己吃
     *      NOT_SUPPORTED: 如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作
     *                     举例：领导有饭吃，分一点给你，我太忙了，放一边，我不吃
     *      NEVER: 如果当前有事务存在，则抛出异常
     *             举例：领导有饭给你吃，我不想吃，我热爱工作，我抛出异常
     *      NESTED: 如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；
     *              如果当前没有事务，则同 REQUIRED。
     *              但是如果主事务提交，则会携带子事务一起提交。
     *              如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或不回滚。
     *              举例：领导决策不对，老板怪罪，领导带着小弟一同受罪。小弟出了差错，领导可以推卸责任。
     */
**** 使用jmeter进行压力测试apache出品 

** 分布式
*** 一致性
**** CAP、分布式锁、分布式一致算法（PAXOS、Zab、Raft、Gossip）、幂等
*** 数据库扩展
**** 读写分离、分片模式（Hbase）
** 中间件
*** 消息队列
**** Kafka、RocketMQ、RabbitMQ、ActiveMQ
**** 消息队列特点
***** 先进先出、发布订阅、持久化、分布式
**** 消息队列的作用
***** 通过异步处理提高系统性能（用户注册时，短信通知或邮箱验证发送）
***** 降低系统耦合性，例如订单系统与库存系统的解耦；
***** 流量消峰，例如在用户流量太大时，排队。
**** kafka是标准、rocketMQ是阿里的、RabbitMQ是erlang写的速度快。
**** 可用性
***** ActiveMQ 和 RabbitMQ 都是基于主从架构实现高可用性。
***** RocketMQ 基于分布式架构。 kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用
**** 吞吐量
***** 万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）
***** 十万级甚至是百万级的 RocketMQ 和 Kafka 
**** 时效性
***** RabbitMQ 基于erlang开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。其他三个都是 ms 级。
**** 功能支持
***** 除了 Kafka，其他三个功能都较为完备。 Kafka 功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准
**** 消息丢失
***** ActiveMQ 和 RabbitMQ 丢失的可能性非常低， RocketMQ 和 Kafka 理论上不会丢失。
**** RabbitMQ （是AMQP协议的实现）
***** RabbitMQ作为AMQP协议的实现，本身就是一个Broker，为客户端的消息提供消息的发布和订阅接口，并在内部实现灵活的消息分发和管理机制，主要概念有：
****** Channel:消息通道，RabbitMQ采用C/S架构，客户端通过连接构建的消息通信模型就是Channel，每个连接可建立多个channel；
****** Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列
****** Queue:消息的载体,每个消息都会被投到一个或多个队列；
****** Binding:绑定，它的作用就是把exchange和queue按照路由规则绑定起来；
****** Routing Key:路由关键字,exchange根据这个关键字进行消息投递。
***** 交换机的类型：direct（p2p）、topic(正则匹配)、fanout（所有绑定的队列）、header（未实现）
***** routingKey和bindingKey匹配时将消息放入队列中。
***** 将一个 RabbitMQ Broker 看作一台 RabbitMQ 服务器。
**** 延迟队列
***** 订单取消使用延迟队列完成
****  
*** 数据库中间件
**** sharding jdbc
** 高可用
*** nginx集群：
**** 在linux上使用epoll模型，是poll模型的进化，支持一个进程打开大量的socket描述符（fd）,活跃socket调用callback函数来实现aio.
**** vrrp协议（virtual router redundancy protocol）
**** keepalive
**** 多台nginx （master和backup）master挂掉后可以进行选举 
**** lvs(linux virtual server) 作用在4层 ip+port   ipvs生成vip
***** 三种模式：1.nat模式（和nginx一样） 2.tun模式（real server需有网卡） 3.DR模式（direct router)
***** arp(接受请求协议)
****** arp-ignore 0:接受所有请求  1:接受对应ip请求
****** arp-announce 0: 任何接口都能向外通告，所有网卡都能接受到通告  1: 尽可能避免本网卡与不匹配目标进行通告 2: 只在本网卡通告
*** redis和memcache的区别
**** 1、持久化  2、数据存储类型：memcache只支持string 3、memcache支持多核多线程而redis只支持单核单线程
*** redis持久化：
**** rdb：快照模式 对数据完整性要求不行 (set m n) 设置当m时间后并且n个数据更改则进行持久化
**** aof：添加模式 设置间隔时间进行持久话 3种写入方式：每秒、每次写入、no（放入buffer中，当大小达到一定后写入）
*** redis缓存过期机制
**** （主动）定期删除  默认每秒查询10次，最多500次
**** （被动）惰性删除
*** redis缓存淘汰策略
**** noeviction: 旧缓存不过期就不删除，返回错误
**** allkeys-lru: 清除最少使用的旧缓存（推荐）
**** allkeys-random
**** volatile-lru: 在设置了expire时间的key中找最少用的
**** volatile-random
**** volatile-ttl: 删除即将过期的
*** redis主从机制
**** 一主二从，在从节点设置slaveof ip port就可以了
**** 但是没有容错机制，在master节点死了以后就无法写入了
**** 全部复制
***** 初次接入复制整个缓存
***** bgsave，fork一个子进程来进行操作
**** 部分复制
***** master有一个写入队列
***** slave记录一个offset来表示队列位置，如果offset在队列的index中，则可以进行部分复制，否则进行完全复制
*** 哨兵使用(sentinel)
**** 端口：26379
**** 故障转移：对redis主从进行监控，当master挂了以后，进行slave选举
**** quroum设置：节点数/2+1
**** 哨兵数量至少3个，而且要奇数个
**** 哨兵分布式部署
**** 一组哨兵监听一组主从
*** 三组三从模式构建redis集群
**** 使用redis-cli --cluster create ip:port ip:port ...
**** 横向扩展，通告一致性hash当方式来选择响应当master节点获取和设置数据。
**** slot是redis上的槽点，三台master的slot编号不同，插入时更加hash选择插槽。
*** redis快的原因
**** 单线程（减少线程切换）
**** 数据结构简单
**** 完全基于内存操作，很多操作都是O（1）
**** 使用多路复用（epoll）监听多个流来进行操作数据，而epoll更是只轮训发出事件的流.(事件驱动)
**** 可以使用单击多redis来充分利用cpu，但是redis的瓶颈一般是带宽和内存大小.
*** redis string类型的大小限制： 512M
*** 如何提高redis速度
**** 不要在master上做备份，可以在slave上做备份
**** 避免在压力大的master上添加从库，可以使用单向链的方式 master<-slave1<-slave2<-slave3
**** slave和master在同一局域网内
*** redis的java客户端
**** redisson、jedis、lettuce 官方推荐：redisson
**** jedis 和 redisson 有哪些区别？
***** Jedis 和 Redisson 都是Java中对Redis操作的封装。Jedis 只是简单的封装了 Redis 的API库，可以看作是Redis客户端，它的方法和Redis 的命令很类似。Redisson 不仅封装了 redis ，还封装了对更多数据结构的支持，以及锁等功能，相比于Jedis 更加大。但Jedis相比于Redisson 更原生一些，更灵活。
**** Redis集群支持最大节点数是多少？
***** Redis 集群有 16384 个哈希槽，每个 key 通过 CRC16 算法计算的结果，对 16384 取模后放到对应的编号在 0-16383 之间的哈希槽，集群的每个节点负责一部分哈希槽
**** redis事务命令
***** discard、exec、multi、unwatch、watch
**** redis一个实例能存多少key，key与value最大是多少？
***** 最多2^32个key；
**** redis实现消息队列
***** 得益与list结构，blpop、brpop；
***** 或者使用发布订阅模式，但是该模式下如果消费者下线了，会导致消息丢失，故使用mq更好。
**** redis缓存穿透
***** 使用布隆过滤（3种hash算法）
**** redis缓存雪崩
***** 大量key同时过期（主要是redis重启时，会过期事件碰撞）
***** 解决方案
****** 用不过期（可以人为更新）
****** 使用互斥锁(拿到lock后，再到db查询，而后回来设置redis，并删除互斥锁)
****** 错开过期事件
****** 多缓存结合(和memcache结合)
****** 使用三方redis
***** redis击穿
****** 和雪崩类似，只是针对单个key
****** 
* grpc
** springcloud
*** Spring Cloud组件运行
**** 所有请求都统一通过 API 网关（Zuul）来访问内部服务。
**** 网关接收到请求后，从注册中心（Eureka）获取可用服务。
**** 由 Ribbon 进行均衡负载后，分发到后端的具体实例。
**** 微服务之间通过 Feign 进行通信处理业务。
*** 业务部署方式相同，都需要前置一个网关来隔绝外部直接调用原子服务的风险。
*** Dubbo 需要自己开发一套 API 网关，而 Spring Cloud 则可以通过 Zuul 配置即可完成网关定制。使用方式上 Spring Cloud 略胜一筹。
** dubbo
   
* 基础 
** java基础
*** java8特性
**** lambda: “函数式接口”是指仅仅只包含一个抽象方法,但是可以有多个非抽象方法(也就是上面提到的默认方法)的接口。 
***** 大部分函数式接口都不用我们自己写，Java8都给我们实现好了，这些接口都在java.util.function包里。
**** Stream(流)
***** stringList
                .stream()
                .filter((s) -> s.startsWith("a"))
                .forEach(System.out::println);//aaa2 aaa1
*** nio、bio、aio
**** 两者都是socket.getInputStream()时线程堵塞的概念
**** bio是blocking io
**** nio是new io，也是 no-blocking io
***** 可以应对高量级的应用请求
***** 在Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。
***** 它支持面向缓冲的，基于通道的I/O操作方法。 
***** NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。
***** IO 面向流(Stream oriented)，而 NIO 面向缓冲区(Buffer oriented)。
****** 在NIO厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的; 在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。
****** 最常用的缓冲区是 ByteBuffer,一个 ByteBuffer 提供了一组功能用于操作 byte 数组。除了ByteBuffer,还有其他的一些缓冲区，事实上，每一种Java基本类型（除了Boolean类型）都对应有一种缓冲区。
***** channel
****** 通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。
***** Selector (选择器)
****** 选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。 因此，为了提高系统效率选择器是有用的。
***** NIO 读数据和写数据方式
****** 通常来说NIO中的所有IO都是从 Channel（通道） 开始的。
****** 从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。
****** 从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。
***** Netty 的出现很大程度上改善了 JDK 原生 NIO 所存在的一些让人难以忍受的问题
**** AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。
**** Java中提供的IO有关的API，在文件处理的时候，其实依赖操作系统层面的IO操作实现的。
***** 比如在Linux 2.6以后，Java中NIO和AIO都是通过epoll来实现的，而在Windows上，AIO是通过IOCP来实现的。
**** 五种IO模型
***** 阻塞IO模型、非阻塞IO模型、IO复用模型、信号驱动IO模型以及异步IO模型。

*** 语法 
    - [ ] 同步异步（buffer-tv是线程安全的）
      - [ ] StringBuffer线程安全、StringBuilder线程不安全
      - [ ] HashMap线程不安全，可以用collections.synchronizeMap()来构建线程安全的，HashTable线程安全，但是基于字典较慢
      - [ ]  HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一
        个 null，直接抛出 NullPointerException。
      - [ ] Vector是线程安全(增长速度100%)，ArrayList线程不安全（增长速度50%），查询用Arraylist、删除和插入用LinkedList,linkedlist是线程不安
        全的
    - [ ] 线程、进程、程序
      - [ ] 程序是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。 
      - [ ] 线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一
        块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量
        级进程
      - [ ] 进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单
        来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，
        文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。 线程是进程划分成的更小的运行单位。线程和进程最
        大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，
        主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。
    - [ ] 一些简单的知识点：
      - [ ] 对于不想进行序列化的变量，使用transient关键字修饰。
    - [ ] io流
      - [ ] 按照流的流向分，可以分为输入流和输出流；
      - [ ] 按照操作单元划分，可以划分为字节流和字符流；
      - [ ] 按照流的角色划分为节点流和处理流。
      - [ ] InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。
      - [ ] OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。
      - [ ] BIO (Blocking I/O): 同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况
        下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一
        个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需
        要一种更高效的 I/O 处理模型来应对更高的并发量
      - [ ] NIO (New I/O): NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽
        象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和
        ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用
        就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来
        提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。
    - [ ] Collections 和 Arrays工具类常见方法：
      - [ ] Collections：reverse、sort、shuffle、swap、rotate、synchronizedCollection、singletonXxx
      - [ ] Arrays: sort、binarySearch、equals、fill、asList、toString、copyOf
    - [ ] object有方法
      - [ ] getclass、hashcode、equals、clone、tostring、notify、notifyAll、wait（3个）、finalize
*** 数据结构
**** 队列、集合、链表、数组、字典、栈
     - [ ] 集合扩充方式
       - [ ] 创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后
         每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大
         小（HashMap 中的tableSizeFor()方法保证，下面给出了源代码）
       - [ ] vector 2*n  arraylist 1.5*n
       - [ ] arraylist初始容量是10，或者用户设置
       - [ ] jdk1.8中hashmap当链表长度大于8时，使用红黑树存储链表数据
     - 
**** 树
*** jvm
    - [ ] 内存分布
      - [ ] 虚拟机栈、本地方法栈、程序计数器 是线程私有的， 堆、方法区（运行时常量池）是线程共享的
      - [ ] 堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (所有对象都在这里分配内存)，方法区主要用
        于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
      - [ ] Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。
      - [ ] 局部变量表主要存放了编译器可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，
        它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。
      - [ ] 堆：Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实
        例，几乎所有的对象实例以及数组都在这里分配内存。
      - [ ] 《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的
        了。 方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。
        也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚
        拟机实现并没有永久代这一说法。
      - [ ] 永久代有一个 JVM 本身设置固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，
        但是比原来出现的几率会更小。
    - [ ] 对象创建过程
      - [ ] 类加载检查： 虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代
        表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。
      - [ ] 分配内存： 对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。分配方
        式有 “指针碰撞” 和 “空闲列表” 两种，选择那种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理
        功能决定。
      - [ ] 初始化零值: 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代
        码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。
      - [ ] 设置对象头: 初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希
        码、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置
        方式。
      - [ ] 执行 init 方法: 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，
        <init> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <init> 方法，把对象按照程序员的意愿进行初始化，
        这样一个真正可用的对象才算完全产生出来。
    - [ ] 对象的内存布局
      - [ ] 对象头、实例数据和对齐填充
      - [ ] 对象头： Hotspot 虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的自身运行时数据（哈希码、GC 分代年龄、锁状态标志等等），
        另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。
      - [ ] 实例数据：该部分是对象真正存储的有效信息，也是在程序中所定义的各种类型的字段内容。
      - [ ] 对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。
    - [ ] 对象访问定位
      - [ ] 句柄：如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实
        例数据与类型数据各自的具体地址信息；
      - [ ] 直接指针： 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是
        对象的地址。
      - [ ] 这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数
        据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。
    - [ ] 8 种基本类型的包装类和常量池
      - [ ] Java 基本类型的包装类的大部分都实现了常量池技术，即 Byte,Short,Integer,Long,Character,Boolean；这 5 种包装类默认创建了数值[-128，
        127] 的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。 为啥把缓存设置为[-128，127]区间？
    - [ ] 垃圾回收
      - [ ] 大对象直接进入老年代
        - [ ] 大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。
        - [ ] 为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。
      - [ ] 长期存活的对象将进入老年代
        - [ ] 如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄
          设为 1.对象在 Survivor 中每熬过一次 MinorGC,年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象
          晋升到老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置。
        - [ ]  动态对象年龄判定
          - [ ] 为了更好的适应不同程序的内存情况，虚拟机不是永远要求对象年龄必须达到了某个值才能进入老年代，如果 Survivor 空间中相同年龄所有对
            象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无需达到要求的年龄。
      - [ ] 对象死亡判断
        - [ ] 引用计数法
        - [ ] 可达性分析算法
          - [ ] Gc Roots到节点引用链
        - [ ] 引用类型
          - [ ] 强引用
          - [ ] 软引用
            - [ ] 如果一个对象只具有软引用，那就类似于可有可无的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会
              回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。
            - [ ] 特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为软引用可以加速 JVM 对垃圾内存的回收速度，
              可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生。
          - [ ] 弱引用
            - [ ] 如果一个对象只具有弱引用，那就类似于可有可无的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。
              在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，
              由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。
          - [ ] 虚引用
            - [ ] "虚引用"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和
              没有任何引用一样，在任何时候都可能被垃圾回收。
            - [ ] 虚引用主要用来跟踪对象被垃圾回收的活动。
            - [ ] 虚引用与软引用和弱引用的一个区别在于： 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如
              果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中
        - [ ] 如何判断一个类是无用的类
          - [ ] 该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例
          - [ ] 加载该类的 ClassLoader 已经被回收。
          - [ ] 该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。
        - [ ] 垃圾收集算法
          - [ ] 标记-清除算法
          - [ ] 复制算法
          - [ ] 标记-整理算法
          - [ ] 分代收集算法
            - [ ] 比如在新生代中，每次收集都会有大量对象死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老
              年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。
        - [ ] 垃圾收集器
          - [ ] Serial 收集器
            - [ ] 大家看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工
              作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "Stop The World" ），直到它收集结束。
            - [ ] 新生代采用复制算法，老年代采用标记-整理算法
          - [ ] ParNew 收集器
            - [ ] ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）
              和 Serial 收集器完全一样。
            - [ ] 新生代采用复制算法，老年代采用标记-整理算法。
          - [ ] Parallel Scavenge 收集器
            - [ ] Parallel Scavenge 收集器也是使用复制算法的多线程收集器，它看上去几乎和ParNew都一样。 那么它有什么特别之处呢？
            - [ ] Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体
              验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值
            - [ ] 新生代采用复制算法，老年代采用标记-整理算法。
          - [ ] Serial Old 收集器
            - [ ] Serial 收集器的老年代版本，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel
              Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。
          - [ ] Parallel Old 收集器
            - [ ] Parallel Scavenge 收集器的老年代版本。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑
              Parallel Scavenge 收集器和 Parallel Old 收集器。
          - [ ] CMS 收集器
            - [ ] CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。
            - [ ] CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程
              （基本上）同时工作。
            - [ ] CMS 收集器是一种 “标记-清除”算法实现的,整个过程分为四个步骤：
              - [ ] 初始标记： 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；
              - [ ] 并发标记： 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的
                可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更
                新的地方。
              - [ ] 重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段
                的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短
              - [ ] 并发清除： 开启用户线程，同时 GC 线程开始对为标记的区域做清扫。
          - [ ] G1 收集器
            - [ ] G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的
              同时,还具备高吞吐量性能特征.
            - [ ] 并行与并发：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分
              其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。
            - [ ] 分代收集：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。
            - [ ] 空间整合：与 CMS 的“标记--清理”算法不同，G1 从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。
            - [ ] 可预测的停顿：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可
              预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。
            - [ ] 4步
              - [ ] 初始标记
              - [ ] 并发标记
              - [ ] 最终标记
              - [ ] 筛选回收
    - [ ] 类加载过程(加载-连接-初始化)
      - [ ] 系统加载 Class 类型的文件主要三步:加载->连接->初始化，连接过程又可分为三步:验证->准备->解析。
      - [ ] 加载
        - [ ] 通过全类名获取定义此类的二进制字节流
        - [ ] 将字节流所代表的静态存储结构转换为方法区的运行时数据结构
        - [ ] 在内存中生成一个代表该类的 Class 对象,作为方法区这些数据的访问入口
      - [ ] 验证
        - [ ] 文件格式、元数据、字节码、符号引用验证
      - [ ] 准备
        - [ ] 准备阶段是正式为类变量分配内存并设置类变量初始值的阶段
      - [ ] 解析
        - [ ] 解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄
          和调用限定符7类符号引用进行。
      - [ ] 初始化
        - [ ] 初始化是类加载的最后一步，也是真正执行类中定义的 Java 程序代码(字节码)，初始化阶段是执行类构造器 <clinit> ()方法的过程。
    - [ ] 类加载器
      - [ ] BootstrapClassLoader(启动类加载器)
        - [ ] 最顶层的加载类，由C++实现，负责加载 %JAVA_HOME%/lib目录下的jar包和类或者或被 -Xbootclasspath参数指定的路径中的所有类。
      - [ ] ExtensionClassLoader(扩展类加载器)
        - [ ] ExtensionClassLoader(扩展类加载器) ：主要负责加载目录 %JRE_HOME%/lib/ext 目录下的jar包和类，或被 java.ext.dirs 系统变量所指定
          的路径下的jar包。
      - [ ] AppClassLoader(应用程序类加载器)
        - [ ] AppClassLoader(应用程序类加载器) :面向我们用户的加载器，负责加载当前应用classpath下的所有jar包和类。
      - [ ] 双亲委派模型
        - [ ] 每一个类都有一个对应它的类加载器。系统中的 ClassLoder 在协同工作的时候会默认使用 双亲委派模型 。即在类加载的时候，系统会首先判
          断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，首先会把该请求委派该父类加载器的 loadClass() 处理，
          因此所有的请求最终都应该传送到顶层的启动类加载器 BootstrapClassLoader 中。当父类加载器无法处理时，才由自己来处理。当父类加载器为
          null时，会使用启动类加载器 BootstrapClassLoader 作为父类加载器。
      - [ ] 自定义类加载器
        - [ ] 除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自java.lang.ClassLoader。如果我们要自定义自己的类加载器，很明显
          需要继承 ClassLoader。
*** 并发
**** 多线程
     - [ ] callable和runnable的区别是一个有返回值一个没有，在executorService中都是转化为futureTask，用submit方法是返回future，用execute返回
       void。
     - [ ] synchronized 开始开销很大，在jdk1.6之后有较大优化，引入自旋锁、锁消除、锁粗化、偏向锁、轻量锁
     - [ ] synchronize 监视monitor锁，monitorenter、monitorexit
     - [ ] synchronized和ReentrantLock 的区别
       - [ ]  两者都是可重入锁
       - [ ] synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API（lock、unlock、配合try/finally）
       - [ ] ReentrantLock 比 synchronized 增加了一些高级功能
     - [ ] volatile关键字
       - [ ] 解决数据不一致问题，寄存器和主存变量不同的问题
       - [ ] 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞
       - [ ] volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证
       - [ ] volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized关键字解决的是多个线程之间访问资源的同步性。
     - [ ] threadlocal
       - [ ] 保存线程私有变量
       - [ ] 最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递
         了变量值
     - [ ] 线程池
       - [ ] Runnable 接口不会返回结果或抛出检查异常，但是Callable 接口可以
       - [ ]  执行execute()方法和submit()方法的区别是什么呢
         - [ ] execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否
         - [ ] submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功，并且
           可以通过 Future 的 get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用 get（long timeout，TimeUnit unit）方法则会
           阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完
       - [ ] 创建线程池
         - [ ] 《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学
           更加明确线程池的运行规则，规避资源耗尽的风险
         - [ ] Executors 返回线程池对象的弊端如下：
           - [ ] FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE ，可能堆积大量的请求，从而导致OOM。
           - [ ] CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。
         - [ ] Executors创建三种类型的ThreadPoolExecutor
           - [ ] FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空
             闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。
           - [ ] SingleThreadExecutor： 方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线
             程空闲，按先入先出的顺序执行队列中的任务。
           - [ ] CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优
             先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池
             进行复用。
         - [ ] ThreadPoolExecutor构造方法
           - [ ] public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler)
           - [ ] 饱和策略
             - [ ] ThreadPoolExecutor.AbortPolicy：抛出 RejectedExecutionException来拒绝新任务的处理。
             - [ ] ThreadPoolExecutor.CallerRunsPolicy：调用当前执行线程运行任务。您不会任务请求。但是这种策略会降低对于新任务提交速度，影响
               程序的整体性能。另外，这个策略喜欢增加队列容量。如果您的应用程序可以承受此延迟并且你不能容忍丢弃任何一个任务请求的话，你可以
               选择这个策略。
             - [ ] ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。
             - [ ] ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。
         - [ ] corePoolSize设置
           - [ ] I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，
             这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。
           - [ ] CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU 核心数多出来的一个线程是
             为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的
             一个线程就可以充分利用 CPU 的空闲时间。
       - [ ] Atomic 原子类
         - [ ] 并发包 java.util.concurrent 的原子类都存放在java.util.concurrent.atomic下（AtomicInteger等）
         - [ ] AtomicInteger 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行
           效率大为提升。
     - [ ] AQS
       - [ ] AQS的全称为（AbstractQueuedSynchronizer），这个类在java.util.concurrent.locks包下面。
       - [ ] AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的ReentrantLock，Semaphore，
         其他的诸如ReentrantReadWriteLock，SynchronousQueue，FutureTask等等皆是基于AQS的。
       - [ ] AQS核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求
         的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加
         入到队列中。
       - [ ] AQS定义两种资源共享方式
         - [ ] Exclusive（独占）：只有一个线程能执行，如ReentrantLock。又可分为公平锁和非公平锁
           - [ ] 公平锁：按照线程在队列中的排队顺序，先到者先拿到锁
           - [ ] 非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的
         - [ ] Share（共享）：多个线程可同时执行，如Semaphore/CountDownLatch。
           Semaphore、CountDownLatch、 CyclicBarrier、ReadWriteLock 我们都会在
           后面讲到。
         - [ ] Semaphore(信号量)-允许多个线程同时访问 synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)
           可以指定多个线程同时访问某个资源。
         - [ ] CountDownLatch （倒计时器）： CountDownLatch是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它
           可以让某一个线程等待直到倒计时结束，再开始执行
         - [ ] CyclicBarrier(循环栅栏)： CyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能比
           CountDownLatch 更加复杂和强大。主要应用场景和 CountDownLatch 类似。
     - [ ] 并发容器
       - [ ] ConcurrentHashMap 线程安全的 HashMap , 使用了分段加锁等技术，每段是一个segment，segment中有hashentry数组
       - [ ] CopyOnWriteArrayList: 线程安全的 List，在读多写少的场合性能非常好，远远好于 Vector.原理：复制一份进行修改，而后指针指向新的
         arraylist,只有写操作是加锁的。使用的是reenterantlock锁
       - [ ] 线程安全的 Queue 可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是 BlockingQueue，非阻塞队列的典型例子是
         ConcurrentLinkedQueue，在实际应用中要根据实际需要选用阻塞队列或者非阻塞队列。 阻塞队列可以通过加锁来实现，非阻塞队列可以通过 CAS 操
         作实现。
         - [ ] ConcurrentLinkedQueue: 高效的并发队列，使用链表实现。可以看做一个线程安全的 LinkedList，这是一个非阻塞队列。
         - [ ] BlockingQueue: 这是一个接口，JDK 内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。
       - [ ] ConcurrentSkipListMap: 跳表的实现。这是一个 Map，使用跳表的数据结构进行快速查找。
         - [ ] 对于一个单链表，即使链表是有序的，如果我们想要在其中查找某个数据，也只能从头到尾遍历链表，这样效率自然就会很低，跳表就不一样了。
           跳表是一种可以用来快速查找的数据结构，有点类似于平衡树。它们都可以对元素进行快速的查找。但一个重要的区别是：对平衡树的插入和删除往
           往很可能导致平衡树进行一次全局的调整。而对跳表的插入和删除只需要对整个数据结构的局部进行操作即可。这样带来的好处是：在高并发的情况
           下，你会需要一个全局锁来保证整个平衡树的线程安全。而对于跳表，你只需要部分锁即可。这样，在高并发环境下，你就可以拥有更好的性能。而
           就查询的性能而言，跳表的时间复杂度也是 O(logn) 所以在并发数据结构中，JDK 使用跳表来实现一个 Map。
     - [ ] 锁
       - [ ] 简单的来说CAS适用于写比较少的情况下（多读场景，冲突一般较少），synchronized适用于写比较多的情况下（多写场景，冲突一般较多） 
       - [ ] 乐观锁
         - [ ] 总是假设最好的状态，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这
           个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量
       - [ ] 悲观锁
         - [ ] 总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿
           到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，
           比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。
     - [ ] 原子类
       - [ ] AtomicInteger 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效
         率大为提升。
       - [ ] CAS的原理是拿期望的值和原本的一个值作比较，如果相同则更新成新的值。UnSafe 类的 objectFieldOffset() 方法是一个本地方法，这个方法
         是用来拿到“原来的值”的内存地址。另外 value 是一个volatile变量，在内存中可见，因此 JVM 可以保证任何时刻任何线程总能拿到该变量的最新
         值。
**** 事务一致性：acid特性
*** 锁
**** 任何对象都有一个 monitor 与之关联，当且一个monitor 被持有后，它将处于锁定状态。线程执行到 monitorenter 指令时，将会尝试获取对象所对应的 monitor 的所有权，即尝试获得对象的锁。
**** 无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。
**** 公平锁、非公平、悲观、乐观、CAS、ABA问题、CopyOnWrite容器、RingBuffer、可重入锁、互斥锁、死锁
***** 二叉树、完全、平衡、BST（二叉查找树）、红黑树、LSM树（日志结构合并树）
***** 偏向锁
****** 大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。
****** 当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要花费CAS操作来加锁和解锁，而只需简单的测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁，
       如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁），如果没有设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。
***** 轻量级锁
****** 线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。
       如果成功，当前线程获得锁，如果失败，则自旋获取锁，当自旋获取锁仍然失败时，表示存在其他线程竞争锁(两条或两条以上的线程竞争同一个锁)，则轻量级锁会膨胀成重量级锁。
***** 重量级锁
****** 重量锁在JVM中又叫对象监视器（Monitor），它很像C中的Mutex，除了具备Mutex(0|1)互斥的功能，它还负责实现了Semaphore(信号量)的功能，也就是说它至少包含一个竞争锁的队列，和一个信号阻塞队列（wait队列），前者负责做互斥，
       后一个用于做线程同步。
** 算法
*** 选择、冒泡、插入、快速、归并、希尔、堆、计数、桶、基数、二分、java中堆排序工具
*** 布隆过滤、KMP、贪心、回溯、剪枝、动态、朴素贝叶斯、推荐算法、最小生成树、最短路径  
*** 算法实现
**** java代码一些使用
***** 数组初始化
      #+begin_src java
        int alpha[26] = {0};
      #+end_src
***** 数据显示转换
      #+begin_src java
       (long)nums[i]-nums[j+i])
      #+end_src
**** 快排
     #+BEGIN_SRC java 
      import java.util.Arrays;

      class Solution {
          public boolean isAnagram(String s, String t) {
              return sort(s).equals(sort(t));
          }

          private String sort(String old){
              char[] arr = old.toCharArray();
              binSort(arr, 0, arr.length - 1);
              return Arrays.toString(arr);
          }

          private void binSort(char[] arr, int start, int end){
              if (start >= end){
                  return;
              }
              int eIndex = end;
              for (int i = start + 1 ; i <= eIndex ; i++){
                  if (arr[i] > arr[start]){
                      for ( int j = eIndex ; j > i; j-- ){
                          if (arr[j] < arr[start]){
                              char pre = arr[i];
                              arr[i] = arr[j];
                              arr[j] = pre;
                              eIndex = j - 1;
                              break;
                          }
                      }
                      if (arr[i] > arr[start]){
                          eIndex = i - 1;
                          break;
                      }
                  }
              }
              char pre = arr[start];
              arr[start] = arr[eIndex];
              arr[eIndex] = pre;
              if (eIndex - 1 > start){
                  binSort(arr, start, eIndex - 1);
              }
              if(end > eIndex + 1){
                  binSort(arr, eIndex + 1 , end);
              }
          }
      } 
     #+END_SRC 
**** 堆排序
**** TODO 
**** TODO 
**** TODO 
* 提升  
** 网络
*** 状态码
**** 1xx：信息性状态码 （正在处理）
**** 3xx：重定向  （需要进行附加操作完成请求）
**** 4xx：客户端错误 （服务器无法处理请求）
**** 5xx：服务器错误 （服务器处理请求出错）
*** 协议
**** osi、tcp、http
*** 模型
**** epoll、java nio、kqueue
*** 长连接、序列化（protobuf）
** 测试
*** TDD、单元测试、压力测试
** 数据库优化
*** mysql
**** 索引
***** MySQL索引使用的数据结构主要有BTree索引 和 哈希索引
***** 对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。
**** 查询缓存
***** 开启查询缓存后在同样的查询条件以及数据情况下，会直接在缓存中返回结果
***** 缓存虽然能够提升数据库的查询性能，但是缓存同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。
***** 因此，开启缓存查询要谨慎，尤其对于写密集的应用来说更是如此。如果开启，要注意合理控制缓存空间大小，一般来说其大小设置为几十MB比较合适。
**** 事务
***** 特性：原子性、一致性、隔离型、持久性
***** 并发事务带来的问题：脏读、丢失修改、不可重复读、幻读
**** 锁机制与InnoDB锁算法
***** MyISAM采用表级锁(table-level locking)。
***** InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁
***** InnoDB存储引擎的锁的算法有三种：
****** Record lock：单个行记录上的锁
****** Gap lock：间隙锁，锁定一个范围，不包括记录本身
****** Next-key lock：record+gap 锁定一个范围，包含记录本身
**** 分库分表
***** 水平分区： 数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。
***** 垂直分区： 
****** 垂直拆分的优点： 可以使得列数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。
****** 垂直拆分的缺点： 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行Join来解决。此外，垂直分区会让事务变得更加复杂；
***** 读/写分离
****** 经典的数据库拆分方案，主库负责写，从库负责读；
***** 实现方式
****** 客户端代理： 分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。 当当网的 Sharding-JDBC 、阿里的TDDL是两种比较常用的实现。
****** 中间件代理： 在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。 我们现在谈的 Mycat 、360的Atlas、网易的DDB等等都是这种架构的实现。
***** 分库分表后id如何生成
****** 可用redis来生成
****** Twitter的snowflake算法 
**** sql语句在mysql中的执行过程
***** 连接器
***** 查询缓存
***** 分析器
***** 优化器
***** 执行器
**** 数据库优化
***** 数据库命名规范
****** 数据库对象名称必须使用小写字母并用下划线分割
****** 所有数据库对象名称禁止使用 MySQL 保留关键字
****** 数据库对象的命名要能做到见名识意，并且最后不要超过 32 个字符
****** 临时库表必须以 tmp_为前缀并以日期为后缀，备份表必须以 bak_为前缀并以日期 (时间戳) 为后缀
****** 所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）
***** 数据库基本设计规范
****** 所有表必须使用 Innodb 存储引擎（Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好）
****** 数据库和表的字符集统一使用 UTF8
****** 所有表和字段都需要添加注释
****** 尽量控制单表数据量的大小,建议控制在 500 万以内。
****** 谨慎使用 MySQL 分区表（分区表在物理上表现为多个文件，在逻辑上表现为一个表；谨慎选择分区键，跨分区查询效率可能更低；建议采用物理分表的方式管理大数据。）
****** 尽量做到冷热数据分离,减小表的宽度(MySQL 限制每个表最多存储 4096 列，并且每一行数据的大小不能超过 65535 字节。)
****** 禁止在表中建立预留字段
****** 禁止在数据库中存储图片,文件等大的二进制数据
****** 禁止在线上做数据库压力测试
****** 禁止从开发环境,测试环境直接连接生成环境数据库
***** 数据库字段设计规范
****** 优先选择符合存储需要的最小的数据类型
****** 避免使用 TEXT,BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据
****** 避免使用 ENUM 类型(修改 ENUM 值需要使用 ALTER 语句,ENUM 类型的 ORDER BY 操作效率低，需要额外操作,禁止使用数值作为 ENUM 的枚举值)
****** 尽可能把所有列定义为 NOT NULL
****** 使用 TIMESTAMP(4 个字节) 或 DATETIME 类型 (8 个字节) 存储时间
****** 同财务相关的金额类数据必须使用 decimal 类型
***** 索引设计规范
****** 限制每张表上的索引数量,建议单张表索引不超过 5 个
****** 禁止给表中的每一列都建立单独的索引(5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。)
****** 每个 Innodb 表必须有个主键
****** 常见索引列建议
******* 出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列
******* 包含在 ORDER BY、GROUP BY、DISTINCT 中的字段
******* 并不要将符合 1 和 2 中的字段的列都建立一个索引， 通常将 1、2 中的字段建立联合索引效果更好
******* 多表 join 的关联列
****** 如何选择索引列的顺序
******* 区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）
******* 尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好）
******* 使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）
****** 避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）
***** 数据库 SQL 开发规范
****** 建议使用预编译语句进行数据库操作
****** 避免数据类型的隐式转换
****** 充分利用表上已经存在的索引
******* 避免使用双%号的查询条件。如：a like '%123%'，（如果无前置%,只有后置%，是可以用到列上的索引的）
******* 一个 SQL 只能利用到复合索引中的一列进行范围查询。如：有 a,b,c 列的联合索引，在查询条件中有 a 列的范围查询，则在 b,c 列上的索引将不会被用到。
******* 在定义联合索引时，如果 a 列要用到范围查找的话，就要把 a 列放到联合索引的右侧，使用 left join 或 not exists 来优化 not in 操作，因为 not in 也通常会使用索引失效。
****** 数据库设计时，应该要对以后扩展进行考虑
****** 程序连接不同的数据库使用不同的账号，禁止跨库查询
****** 禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询
******* 消耗更多的 CPU 和 IO 以及网络带宽资源
******* 无法使用覆盖索引
******* 可减少表结构变更带来的影响(good)
****** 禁止使用不含字段列表的 INSERT 语句
****** 避免使用子查询，可以把子查询优化为 join 操作
****** 避免使用 JOIN 关联太多的表(MySQL 最多允许关联 61 个表，建议不超过 5 个。)
****** 减少同数据库的交互次数
****** 对应同一列进行 or 判断时，使用 in 代替 or(in 的值不要超过 500 个，in 操作可以更有效的利用索引，or 大多数情况下很少能利用到索引。)
****** 禁止使用 order by rand() 进行随机排序(推荐在程序中获取一个随机值，然后从数据库中获取数据的方式。)
****** WHERE 从句中禁止对列进行函数转换和计算
****** 在明显不会有重复值时使用 UNION ALL 而不是 UNION
******* UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作
******* UNION ALL 不会再对结果集进行去重操作
****** 拆分复杂的大 SQL 为多个小 SQL
******* 大 SQL 逻辑上比较复杂，需要占用大量 CPU 进行计算的 SQL
******* MySQL 中，一个 SQL 只能使用一个 CPU 进行计算
******* SQL 拆分后可以通过并行执行来提高处理效率
***** 数据库操作行为规范
****** 超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作
******* 大批量操作可能会造成严重的主从延迟
******* binlog 日志为 row 格式时会产生大量的日志
******* 避免产生大事务操作
****** 对于大表使用 pt-online-schema-change 修改表结构
******* 避免大表修改产生的主从延迟
******* 避免在对表字段进行修改时进行锁表
****** 禁止为程序使用的账号赋予 super 权限
****** 对于程序连接数据库账号,遵循权限最小原则
******* 程序使用数据库账号只能在一个 DB 下使用，不准跨库
******* 程序使用的账号原则上不准有 drop 权限

**** 一个 SQL 执行的很慢
***** 大多数情况下很正常，偶尔很慢，则有如下原因
****** 数据库在刷新脏页，例如 redo log 写满了需要同步到磁盘。
****** 执行的时候，遇到锁，如表锁、行锁。
***** 这条 SQL 语句一直执行的很慢，则有如下原因
****** 没有用上索引：例如该字段没有索引；由于对字段进行运算、函数操作导致无法用索引。
****** 数据库选错了索引
****** sql语句不合理
**** 索引类型
***** 主键索引
***** 唯一索引
***** 普通索引
***** 全文索引
***** 多列索引
**** 视图的作用
***** 简化业务逻辑
***** 对客户端隐藏真实的表结构
*** nosql
**** redis 和 memcached 的区别
***** redis支持更丰富的数据类型（支持更复杂的应用场景）：Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。
***** Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中。
***** 集群模式：memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 redis 目前是原生支持 cluster 模式的.
***** Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的多路 IO 复用模型。
**** redis 提供 6种数据淘汰策略(内存不足时)：
***** volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
***** volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
***** volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
***** allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）
***** allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
***** no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧
**** redis持久化
***** 快照（snapshotting）持久化（RDB）
***** AOF（append-only file）持久化（只追加文件）
**** 缓存雪崩
***** 简介：缓存同一时间大面积的失效（拓机了），所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。
***** 解决办法
****** 事前：尽量保证整个 redis 集群的高可用性，发现机器宕机尽快补上。选择合适的内存淘汰策略
****** 事中：本地ehcache缓存 + hystrix限流&降级，避免MySQL崩掉
****** 事后：利用 redis 持久化机制保存的数据尽快恢复缓存
**** 缓存穿透
***** 缓存穿透说简单点就是大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。举个例子：某个黑客故意制造我们缓存中不存在的 key 发起大量请求，导致大量请求落到数据库
***** 解决办法
****** 最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端
****** 缓存无效 key : 如果缓存和数据库都查不到某个 key 的数据就写一个到 redis 中去并设置过期时间
****** 使用布隆过滤器在缓存层前拦截非法请求、自动为空值添加黑名单(同时可能要为误判的记录添加白名单).但需要考虑布隆过滤器的维护(离线生成/ 实时生成)。
**** redLock 是redis的分布式锁
***** 使用5个master节点供client获取锁，当获取数量多余3个（且时间没有超过）就算得到锁了，不然就解锁，然后等上一段时间。若一台机器挂了，则启动后算其无效一段时间
**** mongoDB、Hbase
** jvm性能优化
*** CDN、连接池
** 设计模式
*** 23种设计模式
*** 6大原则
*** IOC、MVC、AOP、UML、责任链模式
** 书籍
*** 《JAVA 网络编程 第 4 版》
*** 《Java 核心技术卷 1+卷 2》
*** 《Java性能权威指南》
*** 《Java 并发编程之美》
*** 《高性能 MySQL》
*** 《Redis 设计与实现》
*** 《深入分析 Java Web 技术内幕》
*** 《Netty 实战》
*** 《Spring Boot编程思想（核心篇）》
*** 《Spring Cloud 微服务实战》
*** 《Spring 实战（第 4 版）》
*** 《从 Paxos 到 Zookeeper》
*** 《深入理解 Nginx（第 2 版）》
*** 《图解 HTTP》
*** 《HTTP 权威指南》 
*** 《Java 编程思想 (第 4 版)》
** 面试提问
*** 对hr和level较低对面试官
**** 能不能谈谈你作为一个公司老员工对公司的感受
**** 大概什么时候能给我回复呢
**** 我觉得我这次表现的不是太好，你有什么建议或者评价给我吗
*** 对部门领导
**** 未来如果我要加入这个团队，你对我的期望是什么
**** 团队现在面临的最大挑战是什么
*** private,protected,public和default的区别
**** protected修饰符，它主要的作用就是用来保护子类的
**** default来说，有的时候也称为friendly（友员），它是针对本包访问而设计的
*** transient的作用及使用方法
**** 然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。
* 网络安全
** 跨域问题
*** csrf：跨站请求伪造
**** 你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。
*** xss：跨站脚本攻击
**** 是Web程序中最常见的漏洞。指攻击者在网页中嵌入客户端脚本(例如JavaScript), 当用户浏览此网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的.  比如获取用户的Cookie，导航到恶意网站,携带木马等。
*** 跨域同源策略
**** dom查询
**** 接口请求

